version: 2.1

orbs: 
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    # parameters:
    #   # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

jobs:
#Job to build the front-end of the application.
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build


#Job to build the backend
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      #Integrate slack failure notification
      - slack/notify:
          channel: pipeline-alerts
          mentions: '@here'
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: pipeline-alerts
          event: pass
          template: basic_success_1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  #Run unit tests on frontend
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Unit tests frontend
          command: |
            cd frontend
            npm install
            npm run test
      
 #Run unit tests on backend               
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Unit tests backend
          command: |
            cd backend
            npm install
            npm run test
  
#Scan frontend for vulnerabilities
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Code analysis frontend
          command: |
            cd frontend
            npm install
            #npm install oauth-sign@^0.9.0
            #fix vulnerabilities
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

#Scan backend for vulnerabilities
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Code analysis backend
          command: |
            cd backend
            npm install
            #npm install oauth-sign@^0.9.0
            #fix vulnerabilities
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

#Create Infrastructure IAC  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Install Tar and Gzip
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> ~/project/.circleci/ansible/inventory.txt
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      #Destroy environment if job fails 
      # - destroy-environment

#Configure infrastructure using Ansible
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11

    steps:
      - checkout
      
      - add_ssh_keys:
          fingerprints: ["fb:32:9d:12:f7:b4:a3:9f:94:28:ca:45:ee:68:c2:37"] 
      
      - attach_workspace: 
          at: ~/
     
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      
      #Destroy environment if job fails 
      # - destroy-environment

#Initiate migrations
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            #Run and save the migration output
            npm run migrations > migrations_dump.txt

      - run:
          name: Install dependencies
          command: |
            sudo apt-get update -y && sudo apt-get install -y python3 \
            python3-pip python3-setuptools groff less -y && sudo pip3 install --upgrade pip \
            && sudo apt-get clean && sudo apt-get install curl
      
      - run:
          name: Install awscli
          command: |
            pip3 --no-cache-dir install --upgrade awscli
      - run:
          name: Send migration results to kvdb
          command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  curl https://kvdb.io/Vc7GfftkjJcjt992gYHvmh/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
      #Destroy environment if job fails 
      # - destroy-environment
  
#Deploy App Frontend
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0

    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - attach_workspace: 
          at: ~/
        
      - run: 
          name: Install Dependencies
          command: |
            sudo apt-get update && sudo apt-get install -y tar \
            && sudo apt-get install -y awscli

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
        
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 ls
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      #Destroy environment if job fails 
      # - destroy-environment

#Deploy App Backend
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    
    steps:
      - checkout

      - restore_cache:
          keys: [backend-build]

      - add_ssh_keys:
          fingerprints: ["fb:32:9d:12:f7:b4:a3:9f:94:28:ca:45:ee:68:c2:37"] 
      
      - attach_workspace: 
          at: ~/

      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible openssh nodejs npm 
            pip3 install awscli 


      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz . 
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      #Destroy environment if job fails 
      # - destroy-environment 

#Workflows for jobs to run
workflows:
  my_workflows:
    jobs:
      - build-frontend
      - build-backend:
          context: SlackContext
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]